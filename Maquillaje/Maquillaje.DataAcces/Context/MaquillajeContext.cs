// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Maquillaje.Entities.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Maquillaje.DataAccess.Context
{
    public partial class MaquillajeContext : DbContext
    {
        public MaquillajeContext()
        {
        }

        public MaquillajeContext(DbContextOptions<MaquillajeContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VW_maqu_tbClientes_DDLMunicipios> VW_maqu_tbClientes_DDLMunicipios { get; set; }
        public virtual DbSet<VW_maqu_tbEmpleados_DDLMunicipios> VW_maqu_tbEmpleados_DDLMunicipios { get; set; }
        public virtual DbSet<tbCategorias> tbCategorias { get; set; }
        public virtual DbSet<tbClientes> tbClientes { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbFacturas> tbFacturas { get; set; }
        public virtual DbSet<tbFacturasDetalles> tbFacturasDetalles { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPago { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbProductos> tbProductos { get; set; }
        public virtual DbSet<tbProveedores> tbProveedores { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbSucursales> tbSucursales { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<VW_maqu_tbClientes_DDLMunicipios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_maqu_tbClientes_DDLMunicipios", "maqu");

                entity.Property(e => e.depa_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.muni_id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<VW_maqu_tbEmpleados_DDLMunicipios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_maqu_tbEmpleados_DDLMunicipios", "maqu");

                entity.Property(e => e.depa_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.muni_id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<tbCategorias>(entity =>
            {
                entity.HasKey(e => e.cate_Id)
                    .HasName("PK_maqu_tbCategorias_cate_Id");

                entity.ToTable("tbCategorias", "maqu");

                entity.HasIndex(e => e.cate_Nombre, "UQ_maqu_tbCategorias_cate_Nombre")
                    .IsUnique();

                entity.Property(e => e.cate_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.cate_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cate_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.cate_UsuCreacionNavigation)
                    .WithMany(p => p.tbCategoriascate_UsuCreacionNavigation)
                    .HasForeignKey(d => d.cate_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbCategorias_acce_tbUsuarios_cate_UsuCreacion_user_Id");

                entity.HasOne(d => d.cate_UsuModificacionNavigation)
                    .WithMany(p => p.tbCategoriascate_UsuModificacionNavigation)
                    .HasForeignKey(d => d.cate_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbCategorias_acce_tbUsuarios_cate_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbClientes>(entity =>
            {
                entity.HasKey(e => e.clie_Id)
                    .HasName("PK_maqu_tbClientes_clie_Id");

                entity.ToTable("tbClientes", "maqu");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.clie_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.clie_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.clie_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.clie_UsuCreacionNavigation)
                    .WithMany(p => p.tbClientesclie_UsuCreacionNavigation)
                    .HasForeignKey(d => d.clie_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbClientes_acce_tbUsuarios_clie_UsuCreacion_user_Id");

                entity.HasOne(d => d.clie_UsuModificacionNavigation)
                    .WithMany(p => p.tbClientesclie_UsuModificacionNavigation)
                    .HasForeignKey(d => d.clie_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbClientes_acce_tbUsuarios_clie_UsuModificacion_user_Id");

                entity.HasOne(d => d.depa_Id)
                    .WithMany(p => p.tbClientes)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbClientes_gral_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.depa_Id)
                    .HasName("PK_gral_tbDepartamentos_depa_Id");

                entity.ToTable("tbDepartamentos", "gral");

                entity.Property(e => e.depa_Id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.depa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.depa_UsuCreacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuCreacionNavigation)
                    .HasForeignKey(d => d.depa_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuCreacion_user_Id");

                entity.HasOne(d => d.depa_UsuModificacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuModificacionNavigation)
                    .HasForeignKey(d => d.depa_UsuModificacion)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empe_Id)
                    .HasName("PK_maqu_tbEmpleados_empe_Id");

                entity.ToTable("tbEmpleados", "maqu");

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Direccion)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.empe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.empe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.empe_UsuCreacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.empe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbEmpleados_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.empe_UsuModificacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.empe_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbEmpleados_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.estacivi)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.estacivi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbEmpleados_gral_tbEstadosCiviles_estacivi_Id");

                entity.HasOne(d => d.depa_Id)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbEmpleados_gral_tbMunicipios_muni_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.estacivi_Id)
                    .HasName("PK_gral_tbEstadosCiviles");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.Property(e => e.estacivi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.estacivi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.estacivi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.estacivi_Nombre).HasMaxLength(50);

                entity.HasOne(d => d.estacivi_UsuCreacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestacivi_UsuCreacionNavigation)
                    .HasForeignKey(d => d.estacivi_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_acce_tbUsuarios_estacivi_UsuCreacion_user_Id");

                entity.HasOne(d => d.estacivi_UsuModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestacivi_UsuModificacionNavigation)
                    .HasForeignKey(d => d.estacivi_UsuModificacion)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_acce_tbUsuarios_estacivi_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbFacturas>(entity =>
            {
                entity.HasKey(e => e.fact_Id)
                    .HasName("PK_maqu_tbFacturas_fact_Id");

                entity.ToTable("tbFacturas", "maqu");

                entity.Property(e => e.fact_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.fact_Fecha).HasColumnType("datetime");

                entity.Property(e => e.fact_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fact_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbFacturas_maqu_tbClientes_clie_Id");

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.empe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbFacturas_maqu_tbEmpleados_empe_Id");

                entity.HasOne(d => d.fact_UsuCreacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuCreacionNavigation)
                    .HasForeignKey(d => d.fact_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbFacturas_acce_tbUsuarios_fact_UsuCreacion_user_Id");

                entity.HasOne(d => d.fact_UsuModificacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuModificacionNavigation)
                    .HasForeignKey(d => d.fact_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbFacturas_acce_tbUsuarios_fact_UsuModificacion_user_Id");

                entity.HasOne(d => d.meto)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.meto_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbFacturas_maqu_tbMetodosPago_meto_Id");
            });

            modelBuilder.Entity<tbFacturasDetalles>(entity =>
            {
                entity.HasKey(e => e.factdeta_Id)
                    .HasName("PK_maqu_tbFacturasDetalles_factdeta_Id");

                entity.ToTable("tbFacturasDetalles", "maqu");

                entity.Property(e => e.factdeta_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.factdeta_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.factdeta_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.factdeta_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.fact)
                    .WithMany(p => p.tbFacturasDetalles)
                    .HasForeignKey(d => d.fact_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbFacturasDetalles_maqu_tbFacturas_fact_Id");

                entity.HasOne(d => d.factdeta_UsuCreacionNavigation)
                    .WithMany(p => p.tbFacturasDetallesfactdeta_UsuCreacionNavigation)
                    .HasForeignKey(d => d.factdeta_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbFacturasDetalles_acce_tbUsuarios_factdeta_UsuCreacion_user_Id");

                entity.HasOne(d => d.factdeta_UsuModificacionNavigation)
                    .WithMany(p => p.tbFacturasDetallesfactdeta_UsuModificacionNavigation)
                    .HasForeignKey(d => d.factdeta_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbFacturasDetalles_acce_tbUsuarios_factdeta_UsuModificacion_user_Id");

                entity.HasOne(d => d.prod)
                    .WithMany(p => p.tbFacturasDetalles)
                    .HasForeignKey(d => d.prod_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbFacturasDetalles_maqu_tbProductos_prod_Id");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.meto_Id)
                    .HasName("PK_maqu_tbMetodosPago_meto_Id");

                entity.ToTable("tbMetodosPago", "maqu");

                entity.Property(e => e.meto_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.meto_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.meto_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.meto_UsuCreacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UsuCreacionNavigation)
                    .HasForeignKey(d => d.meto_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbMetodosPago_acce_tbUsuarios_meto_UsuCreacion_user_Id");

                entity.HasOne(d => d.meto_UsuModificacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UsuModificacionNavigation)
                    .HasForeignKey(d => d.meto_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbMetodosPago_acce_tbUsuarios_meto_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_id)
                    .HasName("PK_gral_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "gral");

                entity.Property(e => e.muni_id)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.HasOne(d => d.depa)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.depa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_gral_tbDepartamentos_depa_Id");

                entity.HasOne(d => d.muni_UsuCreacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuCreacionNavigation)
                    .HasForeignKey(d => d.muni_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuCreacion_user_Id");

                entity.HasOne(d => d.muni_UsuModificacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuModificacionNavigation)
                    .HasForeignKey(d => d.muni_UsuModificacion)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK_acce_tbPantallas_pant_Id");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.pantrole_Id)
                    .HasName("PK_acce_tbPantallasPorRoles_pantrole_Id");

                entity.ToTable("tbPantallasPorRoles", "acce");

                entity.Property(e => e.pantrole_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pantrole_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pantrole_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pantrole_Identificador)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.pant_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbPantallas_pant_Id");

                entity.HasOne(d => d.pantrole_UsuCreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolespantrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.pantrole_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuCreacion_user_Id");

                entity.HasOne(d => d.pantrole_UsuModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolespantrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.pantrole_UsuModificacion)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuModificacion_user_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbRoles_role_Id");
            });

            modelBuilder.Entity<tbProductos>(entity =>
            {
                entity.HasKey(e => e.prod_Id)
                    .HasName("PK_maqu_tbProductos_prod_Id");

                entity.ToTable("tbProductos", "maqu");

                entity.Property(e => e.prod_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prod_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prod_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prod_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prod_PrecioUni).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.cate)
                    .WithMany(p => p.tbProductos)
                    .HasForeignKey(d => d.cate_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbProductos_maqu_tbCategorias_cate_Id");

                entity.HasOne(d => d.prod_UsuCreacionNavigation)
                    .WithMany(p => p.tbProductosprod_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prod_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbProductos_acce_tbUsuarios_clie_UsuCreacion_user_Id");

                entity.HasOne(d => d.prod_UsuModificacionNavigation)
                    .WithMany(p => p.tbProductosprod_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prod_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbProductos_acce_tbUsuarios_clie_UsuModificacion_user_Id");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbProductos)
                    .HasForeignKey(d => d.prov_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbProductos_maqu_tbProveedores_prov_Id");
            });

            modelBuilder.Entity<tbProveedores>(entity =>
            {
                entity.HasKey(e => e.prov_Id)
                    .HasName("PK_maqu_tbProveedores_prov_Id");

                entity.ToTable("tbProveedores", "maqu");

                entity.Property(e => e.prov_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prov_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.prov_UsuCreacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prov_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_tbProveedores_acce_tbUsuarios_prov_UsuCreacion_user_Id");

                entity.HasOne(d => d.prov_UsuModificacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prov_UsuModificacion)
                    .HasConstraintName("FK_maqu_tbProveedores_acce_tbUsuarios_prov_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK_acce_tbRoles_role_Id");

                entity.ToTable("tbRoles", "acce");

                entity.Property(e => e.role_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role_UsuCreacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.role_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.role_UsuModificacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.role_UsuModificacion)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbSucursales>(entity =>
            {
                entity.HasKey(e => e.sucu_Id)
                    .HasName("PK_maqu_tbSucursales_sucu_Id");

                entity.ToTable("tbSucursales", "maqu");

                entity.Property(e => e.muni_Id)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sucu_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.sucu_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.sucu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sucu_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.muni_Id)
                    .HasConstraintName("FK_maqu_gral_tbSucursales_muni_Id");

                entity.HasOne(d => d.sucu_UsuCreacionNavigation)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.sucu_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_maqu_acce_tbSucursales_user_Id");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.user_Id)
                    .HasName("PK_acce_tbUsuarios_user_Id");

                entity.ToTable("tbUsuarios", "acce");

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.user_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.empe_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_maqu_tbEmpleados_empe_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbRoles_role_Id");

                entity.HasOne(d => d.user_UsuCreacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuCreacionNavigation)
                    .HasForeignKey(d => d.user_UsuCreacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuCreacion_user_Id");

                entity.HasOne(d => d.user_UsuModificacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuModificacionNavigation)
                    .HasForeignKey(d => d.user_UsuModificacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuModificacion_user_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}